This algorithm simply filters users in the database so that candidates match 
requested info.

Step 1 [Category]: Filter users whose preferences don't match the request type
    (i) Get request type from frontend e.g. "REN"
    (ii) Using <service_to_pref>, get its corresponding preference e.g. "OPC"
    (iii) Then query UserSettings for users whose preferences contains requested pref e.g. ["OPC"] is okay but not ["OQC", "OQE"]

'''
Step 2 [Gender]: Filter users by gender
    (i) Profile.objects(gender=requested_gender)
'''

'''
Step 3 [Age]: Filter users by age e.g. allow users +-5 years of requested age
'''

Step 4 [Location]: Perform a GeoQuery to get users within a specific radius from requested location
    - If user's location is set to "N/A", include them

Step 5 [Time]: Filter users by time
    days = ["Monday", "Tuesday", 'Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
    time_of_day = ["Morning", "Afternoon", "Evening", "Night"]
    time_to_str = {
        00:00 - 6:00 AM : "Night",
        6:00 - 12:00 PM : "Morning",
        12:00 - 6:00 PM : "Afternoon",
        6:00 - 12:00 AM : "Evening"
    }
    (i) Given a DateTimeField from frontend, we need to get the day of the week and time of day
    (ii) Then query UserSettings to get users whose time availability fits requested_time

Finally return a list of candidate objects to the frontend to be displayed. Each candidate should
have a profile picture, name, and description. 